package ch.bbw.zork;import java.lang.reflect.Array;import java.util.*;public class Game {	private Parser parser;	private int maxWeight = 24;	private int playerWeight = 0;	private Room currentRoom;	private Room lastRoom;	private Room Sporthalle, Labor, Lobby, Klassenzimmer1, LehrerZimmer,			Lagerraum, Verzweigung, Klassenzimmer2, DirektorZimmer,			Exit;	private ArrayList<Room> rooms;	private Stack<Room> previousRooms = new Stack<Room>();	private ArrayList<Items> ownedItems = new ArrayList<>();	private Scanner scanner = new Scanner(System.in);    public Game() {		parser = new Parser(System.in);		rooms = new ArrayList<>();		Sporthalle = new Room("im Sporthalle");		Labor = new Room("im Labor");		Lobby = new Room("im Lobby");		Klassenzimmer1 = new Room("im Klassenzimmer 1");		LehrerZimmer = new Room("im Lehrerzimmer");		Verzweigung = new Room("in einen Verzweigung");		Lagerraum = new Room("im Lagerraum");		Klassenzimmer2 = new Room("im Klassenzimmer2");		DirektorZimmer = new Room("im DirektorZimmer");		Exit = new Room("im Exit");		rooms.add(Sporthalle);		rooms.add(Labor);		rooms.add(Lobby);		rooms.add(Klassenzimmer1);		rooms.add(LehrerZimmer);		rooms.add(Verzweigung);		rooms.add(Lagerraum);		rooms.add(Klassenzimmer2);		rooms.add(DirektorZimmer);		rooms.add(Exit);		Items ball = new Items("Ball", "Eine runde Ball", 12);		Items yellowKey = new Items("Gelben Schlüssel", "Einen gelben Schlüssel.", 6);		Items redKey = new Items("Roten Schlüssel", "Eine roten Schlüssel.", 6);		Items blueKey = new Items("Blaue Schlüssel", "Einen blauen Schlüssel.", 6);		Items computer = new Items("Computer", "Einen Computer.", 18);		Items brecheisen = new Items("Brecheisen", "Einen Brecheisen.", 15);		Items stuhl = new Items("Stuhl", "Einen Stuhl.", 20);		Items grayKey = new Items("Grauen Schlüssel", "Einen grauen Schlüssel.", 6);		Sporthalle.addItem(ball);		Klassenzimmer1.addItem(yellowKey);		LehrerZimmer.addItem(redKey);		LehrerZimmer.addItem(blueKey);		Labor.addItem(computer);		Lagerraum.addItem(brecheisen);		Klassenzimmer2.addItem(stuhl);		DirektorZimmer.addItem(grayKey);		Exit.addRequieredItem(brecheisen, grayKey);		Klassenzimmer1.addRequieredItem(ball, ball);		LehrerZimmer.addRequieredItem(stuhl, stuhl);		Lagerraum.addRequieredItem(yellowKey, yellowKey);		DirektorZimmer.addRequieredItem(blueKey, computer);		initializeExits();		currentRoom = Sporthalle;	}	private void initializeExits() {		Sporthalle.put(null, Exit, Lobby, null);		Labor.put(null, Lobby, Verzweigung, null);		Lobby.put(Sporthalle, null, Klassenzimmer1, Labor);		Klassenzimmer1.put(Lobby, LehrerZimmer, null, null);		LehrerZimmer.put(null, null, null, Klassenzimmer1);		Verzweigung.put(Labor, null, Lagerraum, Klassenzimmer2);		Lagerraum.put(Verzweigung, null, null, null);		Klassenzimmer2.put(DirektorZimmer, Verzweigung, null, null);		DirektorZimmer.put(null, null, Klassenzimmer2, null);		Exit.put(null, null, null, null);	}	public void play() {		printWelcome();		boolean finished = false;		while (!finished) {			Command command = parser.get();			finished = processCommand(command);		}		System.out.println("Thank you for playing. Good bye.");	}	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("go")) {			goRoom(command);			if (currentRoom == Exit) {				System.out.println("Sie sind gefliehen und haben gewonnen!");				return true;			}		} else if (commandWord.equals("quit")) {			if (command.hasSecondWord())				System.out.println("Quit what?");			else				return true;		} else if (commandWord.equals("map")) {			printMap();		} else if (commandWord.equals("take")) {			if (command.hasSecondWord()) {				takeItems(command.getSecondWord());			} else {				System.out.println("Nehme was?");			}		} else if (commandWord.equals("items")) {			showItems();		}		return false;	}	private void takeItems(String itemName) {		if (currentRoom.getItems().isEmpty()) {			System.out.println("There are no items in this room.");		} else {			if (maxWeight < playerWeight) {				System.out.println("You're carrying too much!");			} else if (playerWeight < maxWeight) {				Items itemToTake = null;				for (Items item : currentRoom.getItems()) {					if (item.getName().equalsIgnoreCase(itemName)) {						itemToTake = item;						break;					}				}				if (itemToTake != null) {					ownedItems.add(itemToTake);					currentRoom.getItems().remove(itemToTake);					playerWeight += itemToTake.getWeight();					System.out.println("Du hast " + itemToTake.getName() + " genommen.");				}			}		}	}	private void showItems() {		if (ownedItems.isEmpty()) {			System.out.println("Du besitzt keine Gegenstände.");			System.out.println("Gewicht: " + playerWeight);		}        else {			System.out.println("Du besitzt diese Gegenstände:");			for (Items item : ownedItems) {				System.out.println(item.getName() + ": " + item.getWeight());			}			System.out.println(playerWeight);		}	}	private void printMap() {		System.out.println("Aktuelle Räume:");		for (Room room : rooms) {			if (room == currentRoom) {				System.out.println("-> " + room.shortDescription() + " (Du bist hier)");			} else {				System.out.println(room.shortDescription());			}		}	}	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("around at Monash Uni, Peninsula Campus.");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void goRoom(Command command) {		if (!command.hasSecondWord()) {			System.out.println("Go Where?");			return;		}		String direction = command.getSecondWord();		if (direction.equals("back")) {			if (!previousRooms.isEmpty()) {				Room lastRoom = previousRooms.pop();				currentRoom = lastRoom;				System.out.println("You go back to the room: " + currentRoom.longDescription());			} else {				System.out.println("You haven't moved yet or there's no previous room to go back to.");			}			return;		}		Room nextRoom = currentRoom.nextRoom(direction);		if (nextRoom == null) {			System.out.println("There is no door!");			return;		}		ArrayList<Items> requiredItems = nextRoom.getRequieredItem();		if (!requiredItems.isEmpty()) {			boolean hasAllRequiredItems = true;			for (Items requiredItem : requiredItems) {				if (!ownedItems.contains(requiredItem)) {					hasAllRequiredItems = false;					System.out.println("You need a " + requiredItem.getName() + " to enter this room.");					break;				}			}			if (hasAllRequiredItems) {				System.out.println("You have the required items. Do you want to use the item to enter the room?");				System.out.println("Type 'yes' to enter or 'no' to stay in the current room.");				String input = scanner.nextLine();				if (input.equalsIgnoreCase("yes")) {					previousRooms.push(currentRoom);					currentRoom = nextRoom;                    ownedItems.remove(requiredItems);                    System.out.println("You use the item to enter the room: " + currentRoom.longDescription());				} else if (input.equalsIgnoreCase("no")) {					System.out.println("You decide not to use the item and stay in the current room.");				} else {					System.out.println("Invalid input. Please type 'yes' or 'no'.");				}			}		} else {			previousRooms.push(currentRoom);			currentRoom = nextRoom;			System.out.println("You enter the room: " + currentRoom.longDescription());		}	}}